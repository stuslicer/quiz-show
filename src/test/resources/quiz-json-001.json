{
  "questions": [
    {
      "question": "What is a record in Java?",
      "options": [
        {
          "option": "A data carrying class",
          "correct": true,
          "explanation": "A record in Java is a type of class designed to hold pure data. It is an immutable and transparent carrier for a fixed set of values."
        },
        {
          "option": "A mutable container similar to a List",
          "correct": false,
          "explanation": "Unlike lists, records are immutable and not containers or collections."
        },
        {
          "option": "A new type of interface",
          "correct": false,
          "explanation": "Records are not interfaces; they are a special kind of class in Java."
        },
        {
          "option": "A control structure like if or loop",
          "correct": false,
          "explanation": "Records are data structures, not control structures."
        }
      ]
    },
    {
      "question": "What are the main characteristics of records in Java?",
      "options": [
        {
          "option": "Immutability and encapsulation",
          "correct": false,
          "explanation": "While immutability is a characteristic of records, encapsulation is a broader OO principle not specific to records."
        },
        {
          "option": "Serialization and mutability",
          "correct": false,
          "explanation": "Records support serialization but they are immutable, not mutable."
        },
        {
          "option": "Immutability, transparency and conciseness",
          "correct": true,
          "explanation": "Records are immutable, meaning their state cannot change after creation. They provide transparency in terms of data representation and are concise, reducing boilerplate code."
        },
        {
          "option": "Concurrency and synchronization",
          "correct": false,
          "explanation": "Concurrency and synchronization are not inherent characteristics of records, but rather concerns addressed at a different level of application design."
        }
      ]
    },
    {
      "question": "How does a record differ from a class in Java?",
      "options": [
        {
          "option": "Records can contain mutable fields",
          "correct": false,
          "explanation": "Records cannot contain mutable fields; all fields in a record are final."
        },
        {
          "option": "Records automatically provide implementations of equals(), hashCode(), and toString()",
          "correct": true,
          "explanation": "Records provide automatic implementations of equals(), hashCode(), and toString() based on the record's state, which is different from traditional classes that require manual implementation of these methods."
        },
        {
          "option": "Records support multiple inheritance",
          "correct": false,
          "explanation": "Java does not support multiple inheritance for classes or records. Records are no exception."
        },
        {
          "option": "Records do not support methods",
          "correct": false,
          "explanation": "Records can support methods. They are not limited to just data fields."
        }
      ]
    },
    {
      "question": "Can records in Java implement interfaces?",
      "options": [
        {
          "option": "No, they cannot",
          "correct": false,
          "explanation": "Records can implement interfaces, this is incorrect."
        },
        {
          "option": "Yes, but only functional interfaces",
          "correct": false,
          "explanation": "Records can implement any type of interfaces, not just functional ones."
        },
        {
          "option": "Yes, and they can implement multiple interfaces",
          "correct": true,
          "explanation": "Records can indeed implement multiple interfaces, just like classes."
        },
        {
          "option": "Yes, but they cannot override the methods of these interfaces",
          "correct": false,
          "explanation": "Records can override the methods of the interfaces they implement, provided these methods are not final."
        }
      ]
    },
    {
      "question": "Which of the following is a valid declaration of a record in Java?",
      "options": [
        {
          "option": "record Person { String name; int age; }",
          "correct": false,
          "explanation": "This syntax is incorrect. The correct syntax should include the parentheses and the components should be declared within them."
        },
        {
          "option": "record Person(String name, int age);",
          "correct": true,
          "explanation": "This is the correct syntax for declaring a record in Java."
        },
        {
          "option": "public record Person { private final String name; private final int age; }",
          "correct": false,
          "explanation": "This declaration is incorrect as it unnecessarily includes access modifiers and field declarations which are automatically managed in records."
        },
        {
          "option": "class Person extends Record { String name; int age; }",
          "correct": false,
          "explanation": "This is incorrect as 'Record' cannot be explicitly extended, and the correct keyword to use is 'record', not 'class'."
        }
      ]
    },
    {
      "question": "What is the purpose of the canonical constructor in a record?",
      "options": [
        {
          "option": "To allow modification of the final fields after object creation",
          "correct": false,
          "explanation": "The canonical constructor does not allow modification of fields post-creation since records are immutable."
        },
        {
          "option": "To define additional fields not stated in the record header",
          "correct": false,
          "explanation": "The canonical constructor cannot introduce new fields beyond those defined in the record's declaration."
        },
        {
          "option": "To perform validation or normalization of data during record creation",
          "correct": true,
          "explanation": "The canonical constructor can be used to validate or normalize incoming data before the record object is created."
        },
        {
          "option": "To override methods from the Object class",
          "correct": false,
          "explanation": "The canonical constructor is not used for overriding Object class methods; it's used primarily for state initialization and validation."
        }
      ]
    }
  ]
}