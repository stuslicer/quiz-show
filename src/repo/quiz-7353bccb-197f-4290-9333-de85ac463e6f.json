{"id":"7353bccb-197f-4290-9333-de85ac463e6f","name":"pattern matching with instanceof","description":"pattern matching with instanceof","difficulty":"simple","tags":[],"aiPromptUsed":"pattern matching with instanceof","aiEngine":"openAI","model":"GPT_4_TURBO","generatedOn":"2024-06-05T10:35:02.0620858","lastUpdatedOn":"2024-06-05T10:35:02.0670866","questions":[{"number":1,"text":"What was introduced in Java 14 to enhance the instanceof operator?","options":[{"text":"Switch expressions","isCorrect":false,"explanation":"Switch expressions were introduced to simplify the switch statement, not to enhance instanceof."},{"text":"Pattern Matching for instanceof","isCorrect":true,"explanation":"Pattern Matching for instanceof was introduced in Java 14 as a preview feature to simplify the use of instanceof in conditions."},{"text":"Record classes","isCorrect":false,"explanation":"Record classes provide a compact syntax for declaring classes, not related to instanceof."},{"text":"Sealed classes","isCorrect":false,"explanation":"Sealed classes restrict which other classes may extend them, unrelated to instanceof enhancements."}]},{"number":2,"text":"Which is a valid use of pattern matching with instanceof in Java?","options":[{"text":"if (obj instanceof String s) { System.out.println(s.toUpperCase()); }","isCorrect":true,"explanation":"This is the correct syntax for using pattern matching with instanceof to directly cast and bind the variable."},{"text":"if (obj instanceof String) { String s = obj; System.out.println(s.toUpperCase()); }","isCorrect":false,"explanation":"This is not using pattern matching, it's the traditional check and explicit casting."},{"text":"if (String s = obj instanceof String) { System.out.println(s.toUpperCase()); }","isCorrect":false,"explanation":"This syntax is incorrect and will result in a compile-time error."},{"text":"if (obj instanceof String s && s.isEmpty()) { System.out.println(\"Empty String\"); }","isCorrect":false,"explanation":"While this looks correct and is a valid use case, the correct answer is focused on the basic valid usage."}]},{"number":3,"text":"What does the following code print if 'obj' is an instance of String that contains \"test\"? \nif (obj instanceof String s) { System.out.println(s); } else { System.out.println(\"Not a String\"); }","options":[{"text":"\"test\"","isCorrect":true,"explanation":"Since obj is an instance of String, the pattern matching within instanceof will bind obj to s and print it."},{"text":"\"Not a String\"","isCorrect":false,"explanation":"This would be printed if obj was not an instance of String."},{"text":"Nothing","isCorrect":false,"explanation":"The code will print something in both cases, this is incorrect."},{"text":"It throws an exception","isCorrect":false,"explanation":"There is no exception thrown in this valid use of instanceof pattern matching."}]},{"number":4,"text":"How does pattern matching for instanceof help in code maintenance?","options":[{"text":"It eliminates the need for manual type casting","isCorrect":true,"explanation":"Pattern matching for instanceof automatically handles the casting when the condition is true, making code cleaner and less error-prone."},{"text":"It increases performance by avoiding runtime type checks","isCorrect":false,"explanation":"It does not avoid runtime type checks but makes them safer and cleaner in syntax."},{"text":"It allows multiple types to be checked in a single statement","isCorrect":false,"explanation":"Pattern matching checks one type at a time; it cannot be used to check multiple types in a single instanceof statement."},{"text":"It automatically imports the necessary classes","isCorrect":false,"explanation":"Importing classes is unrelated to using instanceof or pattern matching."}]},{"number":5,"text":"Which statement is true about the scope of the variable introduced in the instanceof pattern matching?","options":[{"text":"The variable is scoped to the block where it is declared","isCorrect":false,"explanation":"The variable is scoped not to the block but to the conditional branch where it is used."},{"text":"The variable is scoped globally within the class","isCorrect":false,"explanation":"The variable is not globally scoped; it is limited to the conditional logic where it is declared."},{"text":"The variable is scoped to the condition and the subsequent block where it is used","isCorrect":true,"explanation":"The variable defined in the pattern matching of instanceof is scoped to the condition and its corresponding block, making it not accessible outside."},{"text":"The variable does not have any scope restrictions","isCorrect":false,"explanation":"The variable has specific scope restrictions; it is only accessible within the conditional block."}]}]}