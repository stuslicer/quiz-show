{"id":"a3b3c03d-fe1e-49e5-a5f2-aaf2cccd0a47","name":"sealed classes","description":"sealed classes","difficulty":"simple","tags":[],"aiPromptUsed":"sealed classes","aiEngine":"openAI","model":"GPT_4_TURBO","generatedOn":"2024-06-05T16:06:08.3664739","lastUpdatedOn":"2024-06-05T16:06:08.3714739","questions":[{"number":1,"text":"What keyword is used to declare a sealed class in Java?","options":[{"text":"final","isCorrect":false,"explanation":"The 'final' keyword prevents class inheritance but does not allow subclasses in restricted form."},{"text":"sealed","isCorrect":true,"explanation":"The 'sealed' keyword is used to declare a class that restricts which other classes may inherit from it."},{"text":"closed","isCorrect":false,"explanation":"'closed' is not a valid keyword in Java for class declaration."},{"text":"abstract","isCorrect":false,"explanation":"While 'abstract' classes cannot be instantiated, they do not restrict inheritance like sealed classes."}]},{"number":2,"text":"Which of the following is a valid way to define permitted subclasses in a sealed class?","options":[{"text":"List subclasses within the class body","isCorrect":false,"explanation":"Subclasses are not listed within the body of the sealed class itself."},{"text":"Use the 'permits' clause following the class declaration","isCorrect":true,"explanation":"The 'permits' clause is used right after the sealed class declaration to specify which classes may extend it."},{"text":"Declare subclasses in the same package","isCorrect":false,"explanation":"Simply declaring subclasses in the same package does not automatically make them permitted subclasses."},{"text":"Use the 'implements' keyword","isCorrect":false,"explanation":"'implements' is used for interfaces, not for declaring permitted subclasses of a sealed class."}]},{"number":3,"text":"What must subclasses of a sealed class do?","options":[{"text":"They must also be sealed.","isCorrect":false,"explanation":"Subclasses of a sealed class can be sealed, non-sealed, or final, but are not required to be sealed."},{"text":"They must be declared in the same file.","isCorrect":false,"explanation":"Subclasses must be in the same module, but not necessarily in the same file."},{"text":"They must be declared within the same module.","isCorrect":true,"explanation":"Subclasses of a sealed class must be part of the same module as the sealed class."},{"text":"They must override all abstract methods.","isCorrect":false,"explanation":"This requirement is true for any abstract class, not specifically for sealed ones."}]},{"number":4,"text":"Which of the following is not a valid modifier for a sealed class?","options":[{"text":"abstract","isCorrect":false,"explanation":"A sealed class can be abstract, permitting various implementations by its subclasses."},{"text":"final","isCorrect":true,"explanation":"A sealed class cannot be final because it must have permitted subclasses."},{"text":"non-sealed","isCorrect":false,"explanation":"Subclasses of a sealed class can be declared as non-sealed to allow further subclassing."},{"text":"public","isCorrect":false,"explanation":"A sealed class can be declared public."}]},{"number":5,"text":"What happens if a sealed class is declared with no permitted subclasses?","options":[{"text":"It behaves like a final class.","isCorrect":true,"explanation":"Without any permitted subclasses, a sealed class effectively behaves like a final class."},{"text":"It results in a compilation error.","isCorrect":false,"explanation":"It does not result in a compilation error, but it restricts subclassing, similar to a final class."},{"text":"It is considered an abstract class.","isCorrect":false,"explanation":"Being sealed does not inherently make a class abstract; these are separate concepts."},{"text":"The class must then be declared abstract.","isCorrect":false,"explanation":"There is no requirement for a class without permitted subclasses to be abstract."}]},{"number":6,"text":"Can interfaces be sealed in Java?","options":[{"text":"Yes, interfaces can be sealed.","isCorrect":true,"explanation":"Interfaces can indeed be sealed, restricting which other interfaces or classes can implement them."},{"text":"No, only classes can be sealed.","isCorrect":false,"explanation":"Both classes and interfaces can be sealed in Java."},{"text":"Yes, but only if they are also declared as abstract.","isCorrect":false,"explanation":"Interfaces are inherently abstract, and being sealed does not require additional abstract declaration."},{"text":"No, sealing is not applicable to interfaces.","isCorrect":false,"explanation":"Sealing is applicable to both classes and interfaces in Java."}]},{"number":7,"text":"What is the primary purpose of sealed classes or interfaces?","options":[{"text":"To enhance runtime performance by reducing overhead.","isCorrect":false,"explanation":"Sealed classes do not specifically enhance runtime performance; they are more about controlling inheritance."},{"text":"To restrict class inheritance and maintain a controlled hierarchy.","isCorrect":true,"explanation":"The primary purpose of sealed classes is to restrict which classes or interfaces can extend or implement them, thus controlling the inheritance hierarchy."},{"text":"To automatically generate code at compile time.","isCorrect":false,"explanation":"Sealed classes do not involve automatic code generation at compile time."},{"text":"To enforce immutable data structures.","isCorrect":false,"explanation":"Sealed classes are not specifically used to enforce immutability; this is more typically achieved with final fields or records."}]}]}