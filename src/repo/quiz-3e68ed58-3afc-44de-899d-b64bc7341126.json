{"id":"3e68ed58-3afc-44de-899d-b64bc7341126","name":"stream collectors","description":"stream collectors","difficulty":"simple","tags":[],"aiPromptUsed":"stream collectors","aiEngine":"openAI","model":"GPT_4_TURBO","generatedOn":"2024-06-05T09:37:38.4848913","lastUpdatedOn":"2024-06-05T09:37:38.4898924","questions":[{"number":1,"text":"What does Collectors.toList() return?","options":[{"text":"Set","isCorrect":false,"explanation":"Collectors.toList() returns a List, not a Set."},{"text":"Map","isCorrect":false,"explanation":"Collectors.toList() returns a List, not a Map."},{"text":"List","isCorrect":true,"explanation":"Collectors.toList() collects the elements of a stream into a List."},{"text":"Collection","isCorrect":false,"explanation":"Collectors.toList() specifically returns a List, not a general Collection."}]},{"number":2,"text":"Which collector would you use to collect stream elements into a map by applying a transformation function on each element?","options":[{"text":"Collectors.toMap()","isCorrect":true,"explanation":"Collectors.toMap() is used to collect elements into a Map with specified key and value mapping functions."},{"text":"Collectors.toList()","isCorrect":false,"explanation":"Collectors.toList() collects elements into a List, not a Map."},{"text":"Collectors.toSet()","isCorrect":false,"explanation":"Collectors.toSet() collects elements into a Set, not a Map."},{"text":"Collectors.groupingBy()","isCorrect":false,"explanation":"Collectors.groupingBy() is used for grouping objects by some property and storing results in a Map, but it is not used for transforming elements directly into Map keys and values."}]},{"number":3,"text":"What is the purpose of Collectors.groupingBy()?","options":[{"text":"To create a List from stream elements","isCorrect":false,"explanation":"Collectors.groupingBy() is used for grouping elements into a Map, not for creating a List."},{"text":"To group stream elements into a Map based on a classifier function","isCorrect":true,"explanation":"Collectors.groupingBy() groups elements based on a classifier function and stores the results in a Map."},{"text":"To merge stream elements into a single summary result","isCorrect":false,"explanation":"Collectors.groupingBy() groups elements rather than merging them into a summary result."},{"text":"To filter stream elements based on a predicate","isCorrect":false,"explanation":"Collectors.groupingBy() is used for grouping, not filtering elements."}]},{"number":4,"text":"Which collector would be best for collecting stream elements into a set?","options":[{"text":"Collectors.toSet()","isCorrect":true,"explanation":"Collectors.toSet() collects elements into a Set, which automatically removes duplicates."},{"text":"Collectors.toList()","isCorrect":false,"explanation":"Collectors.toList() collects elements into a List and allows duplicates."},{"text":"Collectors.toMap()","isCorrect":false,"explanation":"Collectors.toMap() is used for creating a Map, not a Set."},{"text":"Collectors.joining()","isCorrect":false,"explanation":"Collectors.joining() is used for concatenating the String representation of elements."}]},{"number":5,"text":"What does Collectors.partitioningBy() do?","options":[{"text":"Partitions input elements into a Map of two Lists based on a Boolean predicate","isCorrect":true,"explanation":"Collectors.partitioningBy() partitions elements based on a predicate into a Map with keys true and false, each key mapping to a List of elements that match or don't match the predicate."},{"text":"Groups elements into a List","isCorrect":false,"explanation":"Collectors.partitioningBy() specifically partitions elements into a Map, not just into a List."},{"text":"Reduces elements into a single summary element","isCorrect":false,"explanation":"Collectors.partitioningBy() is used for partitioning, not reducing elements."},{"text":"Sorts elements based on natural ordering","isCorrect":false,"explanation":"Collectors.partitioningBy() does not sort elements, it partitions them based on a predicate."}]},{"number":6,"text":"How can Collectors.collectingAndThen() be best described?","options":[{"text":"A collector that transforms the result of another collector","isCorrect":true,"explanation":"Collectors.collectingAndThen() wraps another collector, applying a finishing transformation to the result of the wrapped collector."},{"text":"A collector that concatenates the string representation of elements","isCorrect":false,"explanation":"This describes Collectors.joining(), not Collectors.collectingAndThen()."},{"text":"A collector that groups elements into sets","isCorrect":false,"explanation":"Collectors.collectingAndThen() does not specifically group elements into sets; it applies a transformation function after collection."},{"text":"A collector that filters elements","isCorrect":false,"explanation":"Collectors.collectingAndThen() is not used for filtering; it modifies the result of another collector."}]},{"number":7,"text":"What result does Collectors.joining() produce?","options":[{"text":"A concatenated string of all Stream elements","isCorrect":true,"explanation":"Collectors.joining() concatenates the CharSequence elements of a Stream into a single String."},{"text":"A list of all Stream elements","isCorrect":false,"explanation":"Collectors.joining() produces a String, not a List."},{"text":"A set of all Stream elements","isCorrect":false,"explanation":"Collectors.joining() produces a String, not a Set."},{"text":"A map of all Stream elements","isCorrect":false,"explanation":"Collectors.joining() produces a String, not a Map."}]}]}