{"id":"80656024-8fae-499a-b21f-64d191cbd32b","name":"interface static and default methods","description":"interface static and default methods","difficulty":"simple","tags":[],"aiPromptUsed":"interface static and default methods","aiEngine":"openAI","model":"GPT_4_TURBO","generatedOn":"2024-06-05T17:23:32.5482429","lastUpdatedOn":"2024-06-05T17:23:32.5532444","questions":[{"number":1,"text":"Which of the following statements is true about static methods in interfaces?","options":[{"text":"Static methods in interfaces cannot be overridden.","isCorrect":true,"explanation":"Static methods in interfaces are not part of the instance, and therefore cannot be overridden like instance methods."},{"text":"Static methods in interfaces can be overridden like instance methods.","isCorrect":false,"explanation":"Static methods belong to the interface class, not the objects, hence they cannot be overridden."},{"text":"Static methods can only be declared in abstract classes, not interfaces.","isCorrect":false,"explanation":"Static methods can indeed be declared in interfaces from Java 8 onwards."},{"text":"Interfaces with static methods cannot be implemented by a class.","isCorrect":false,"explanation":"Interfaces can be implemented by classes even if they have static methods."}]},{"number":2,"text":"What is the main purpose of default methods in interfaces?","options":[{"text":"To provide a default implementation to methods, allowing interface evolution.","isCorrect":true,"explanation":"Default methods were introduced to provide a way to add new methods to an interface without breaking the existing implementations."},{"text":"To override methods from java.lang.Object.","isCorrect":false,"explanation":"Default methods cannot be used to override methods from java.lang.Object."},{"text":"To make multiple inheritance possible in Java.","isCorrect":false,"explanation":"Java does not support multiple inheritance of state. Default methods introduce a form of multiple inheritance of behavior, but not state."},{"text":"To declare constants in the interface.","isCorrect":false,"explanation":"Constants are usually declared as static final variables, not as default methods."}]},{"number":3,"text":"How can a default method be invoked from within an implementing class?","options":[{"text":"Using the interface name followed by the method name.","isCorrect":false,"explanation":"This syntax is used for invoking static methods, not default methods."},{"text":"Using super keyword followed by the method name.","isCorrect":true,"explanation":"In an implementing class, a default method can be invoked using 'InterfaceName.super.methodName()'."},{"text":"Directly by its name, just like a normal method.","isCorrect":false,"explanation":"Direct invocation will refer to the class's own methods or need the method to be overridden if declared in the class."},{"text":"Using the new keyword.","isCorrect":false,"explanation":"The new keyword is used to create new instances of classes, not for invoking methods."}]},{"number":4,"text":"What happens if a class implements two interfaces that both define the same default method?","options":[{"text":"Java automatically selects one of the implementations.","isCorrect":false,"explanation":"Java does not automatically select an implementation, it results in a compiler error unless the class overrides the disputed method."},{"text":"The class must override the default method.","isCorrect":true,"explanation":"The class must provide its own implementation to resolve the conflict, or explicitly choose which default method to use."},{"text":"It results in a runtime exception.","isCorrect":false,"explanation":"The issue arises at compile time, not at runtime."},{"text":"Both methods are merged automatically by the compiler.","isCorrect":false,"explanation":"The Java compiler does not merge methods automatically; the developer must handle the conflict."}]},{"number":5,"text":"Can a default method in an interface be declared as final?","options":[{"text":"Yes, to prevent it from being overridden.","isCorrect":false,"explanation":"Default methods cannot be declared as final because this would contradict the purpose of a default method being able to be overridden."},{"text":"No, default methods are meant to be overridden if needed.","isCorrect":true,"explanation":"Default methods are designed to be optionally overridden, hence they cannot be declared as final."},{"text":"Yes, but only if the interface is also declared as final.","isCorrect":false,"explanation":"Interfaces cannot be declared as final in Java."},{"text":"No, because methods in interfaces are final by default.","isCorrect":false,"explanation":"Methods in interfaces are not final by default; they are abstract by default unless specified otherwise (as static or default)."}]},{"number":6,"text":"Which of the following is a valid reason to use static methods in an interface?","options":[{"text":"To allow the methods to access instance variables.","isCorrect":false,"explanation":"Static methods cannot access instance variables directly because they belong to the class, not instances of the class."},{"text":"To provide utility methods that are relevant to all implementations of the interface.","isCorrect":true,"explanation":"Static methods in interfaces are used to provide utility methods that can be accessed without an instance of the interface."},{"text":"To override static methods from the Object class.","isCorrect":false,"explanation":"Static methods in interfaces cannot override methods from the Object class."},{"text":"To ensure they are only called on instances of the interface.","isCorrect":false,"explanation":"Static methods in interfaces are not called on instances but rather on the interface type itself."}]},{"number":7,"text":"What is the correct way to access a static method in an interface from outside the interface?","options":[{"text":"InterfaceName.staticMethodName();","isCorrect":true,"explanation":"Static methods in an interface are accessed using the interface name followed by the method name."},{"text":"new InterfaceName().staticMethodName();","isCorrect":false,"explanation":"Static methods should not and cannot be accessed via interface instances; they should be accessed statically."},{"text":"staticMethodName();","isCorrect":false,"explanation":"You need to specify the interface name when accessing static methods outside the interface."},{"text":"InstanceName.staticMethodName();","isCorrect":false,"explanation":"Static methods are not called on instances but rather on the interface type."}]},{"number":8,"text":"Can an interface implement another interface?","options":[{"text":"Yes, interfaces can implement other interfaces.","isCorrect":false,"explanation":"Interfaces cannot implement other interfaces, they can only extend them."},{"text":"No, interfaces can only extend other interfaces.","isCorrect":true,"explanation":"Interfaces do not implement but rather extend other interfaces to inherit their methods."},{"text":"Yes, but only if they provide default implementations for all methods.","isCorrect":false,"explanation":"Interfaces cannot implement but can extend others, regardless of method implementations."},{"text":"No, an interface cannot have any relationship with another interface.","isCorrect":false,"explanation":"Interfaces can indeed have relationships with other interfaces, specifically, they can extend them."}]}]}