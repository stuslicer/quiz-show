{"id":"c7899607-ff39-43b7-b5f8-59cc27063a05","name":"new features in Java 11","description":"new features in Java 11","difficulty":"simple","tags":[],"aiPromptUsed":"new features in Java 11","aiEngine":"openAI","model":"GPT_4_TURBO","generatedOn":"2024-06-18T17:36:43.8849214","lastUpdatedOn":"2024-06-18T17:36:43.8859223","questions":[{"number":1,"text":"What does the 'var' keyword in Java 11 allow you to do?","options":[{"text":"Declare variables without specifying their type explicitly.","isCorrect":true,"explanation":"The 'var' keyword allows for local variable type inference, meaning the type for the local variable will be inferred by the compiler, enhancing code readability."},{"text":"Create a constant variable similar to 'final'.","isCorrect":false,"explanation":"'var' is used for declaring local variables with inferred types, not constants. Use 'final' for declaring constants."},{"text":"Instantiate classes without calling constructors.","isCorrect":false,"explanation":"'var' does not affect class instantiation; it is purely for type inference of local variables."},{"text":"Declare global variables.","isCorrect":false,"explanation":"'var' can only be used to declare local variables inside method or constructor blocks."}]},{"number":2,"text":"What new feature in Java 11 helps with running single-file programs?","options":[{"text":"Enhanced Enums","isCorrect":false,"explanation":"Enhanced Enums are not related to running single-file programs."},{"text":"Launch Single-File Source-Code Programs","isCorrect":true,"explanation":"Java 11 allows executing a single source-code file directly without compilation, using the java command, simplifying development and testing of simple programs."},{"text":"Improved Garbage Collection","isCorrect":false,"explanation":"Improved Garbage Collection optimizes memory management but does not specifically help in running single-file programs."},{"text":"Introduction of Modules","isCorrect":false,"explanation":"Modules were introduced in Java 9, not Java 11, and do not directly facilitate the execution of single-file programs."}]},{"number":3,"text":"Which method has been added to the String class in Java 11 that removes white space from both ends of a string?","options":[{"text":"strip()","isCorrect":true,"explanation":"The 'strip()' method is introduced in Java 11 which removes both leading and trailing white space, using Unicode-aware character properties."},{"text":"trim()","isCorrect":false,"explanation":"'trim()' has been in Java for a long time but it only considers space characters (ASCII 32), not other whitespace characters defined in Unicode."},{"text":"cut()","isCorrect":false,"explanation":"There is no 'cut()' method in Java for String manipulation."},{"text":"chop()","isCorrect":false,"explanation":"'chop()' is not a recognized String method in Java."}]},{"number":4,"text":"What does the HttpClient API introduced in Java 11 support?","options":[{"text":"Only synchronous HTTP/1.1 calls","isCorrect":false,"explanation":"The HttpClient API supports both synchronous and asynchronous programming models, and it supports HTTP/2 as well."},{"text":"Only asynchronous HTTP/2 calls","isCorrect":false,"explanation":"HttpClient supports both synchronous and asynchronous calls and both HTTP/1.1 and HTTP/2."},{"text":"Synchronous and asynchronous HTTP/1.1 and HTTP/2 calls","isCorrect":true,"explanation":"The HttpClient API introduced in Java 11 supports both synchronous and asynchronous calls and handles both HTTP/1.1 and HTTP/2 protocols."},{"text":"HTTP/3 calls","isCorrect":false,"explanation":"As of Java 11, HTTP/3 is not supported by the HttpClient API."}]},{"number":5,"text":"Which tool introduced in Java 11 reports on the source code to API dependencies?","options":[{"text":"jdep","isCorrect":false,"explanation":"jdep is not a recognized tool in Java 11."},{"text":"jdeprscan","isCorrect":true,"explanation":"jdeprscan is a tool that came with Java 11 and helps developers find uses of deprecated API elements in Java code."},{"text":"javadoc","isCorrect":false,"explanation":"javadoc is used for generating API documentation from Java source code, not for reporting on code dependencies."},{"text":"jar","isCorrect":false,"explanation":"jar is used to package Java classes into a single archive file, not for reporting on source code to API dependencies."}]},{"number":6,"text":"What is the purpose of the 'nest-based access control' introduced in Java 11?","options":[{"text":"It simplifies the handling of non-public classes and members within the same outer class.","isCorrect":true,"explanation":"Nest-based access control is a feature in Java 11 that allows classes that are logically part of the same code entity (nest) to access each other's private members without needing synthetic bridge methods."},{"text":"It restricts access to classes based on module memberships.","isCorrect":false,"explanation":"Nest-based access control is not about module membership; it deals with access within the same 'nest' or outer class."},{"text":"It provides a new way to synchronize methods.","isCorrect":false,"explanation":"Nest-based access control has nothing to do with synchronization of methods."},{"text":"It enhances interface abstraction capabilities.","isCorrect":false,"explanation":"Nest-based access control does not directly affect interface abstraction but rather access between closely related classes."}]},{"number":7,"text":"Which command-line tool added in Java 11 can be used for launching JavaScript code?","options":[{"text":"javac","isCorrect":false,"explanation":"javac is the Java compiler, used for compiling Java programs, not for executing JavaScript code."},{"text":"jshell","isCorrect":false,"explanation":"jshell is an interactive Java shell but not specifically designed for JavaScript execution."},{"text":"jlink","isCorrect":false,"explanation":"jlink is a tool that assembles and optimizes a set of modules and their dependencies into a custom runtime image."},{"text":"jjs","isCorrect":true,"explanation":"jjs is a command-line tool introduced to support executing JavaScript code on the JVM. However, note that jjs was actually deprecated in Java 11."}]},{"number":8,"text":"What feature introduced in Java 11 helps in efficient collection of low-latency garbage collection?","options":[{"text":"ZGC (Z Garbage Collector)","isCorrect":true,"explanation":"ZGC is a scalable low-latency garbage collector introduced in Java 11 aimed at improving system performance for applications requiring large heaps and low-latency."},{"text":"Epsilon GC","isCorrect":false,"explanation":"Epsilon GC is an experimental garbage collector meant for performance testing and is not intended for actual memory management as it handles no memory reclamation."},{"text":"CMS (Concurrent Mark Sweep)","isCorrect":false,"explanation":"CMS was deprecated and is not the low-latency collector introduced in Java 11."},{"text":"Shenandoah GC","isCorrect":false,"explanation":"While Shenandoah GC is a low-pause-time collector, it was not introduced in Java 11."}]},{"number":9,"text":"What utility was enhanced in Java 11 to support reading the content of a file into a String?","options":[{"text":"Files.readString()","isCorrect":true,"explanation":"Java 11 introduced Files.readString(), which allows reading all content from a file directly into a String, simplifying file handling."},{"text":"Scanner class","isCorrect":false,"explanation":"While Scanner can read files, it was not enhanced in Java 11 specifically for this purpose."},{"text":"BufferedReader.readLine()","isCorrect":false,"explanation":"BufferedReader.readLine() reads text from a character-input stream, buffering characters to provide efficient reading of characters, arrays, and lines, but it was not introduced or enhanced in Java 11."},{"text":"FileUtils.readFileToString()","isCorrect":false,"explanation":"FileUtils.readFileToString() is a part of Apache Commons IO, not a standard Java API."}]},{"number":10,"text":"Which API was standardized and made official in Java 11?","options":[{"text":"JavaFX","isCorrect":false,"explanation":"JavaFX was decoupled from the JDK after Java 10."},{"text":"JDBC","isCorrect":false,"explanation":"JDBC has been a standard part of Java long before Java 11."},{"text":"Flight Recorder","isCorrect":true,"explanation":"Java Flight Recorder, which was previously a commercial feature in Oracle JDK, was open-sourced and standardized in Java 11."},{"text":"Java Compiler API","isCorrect":false,"explanation":"The Java Compiler API was standardized before Java 11."}]}]}